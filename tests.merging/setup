#!/bin/bash
# Copyright (C) 2012-2014  Codethink Limited
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.


# Set up $DATADIR.
#
# - a morph.conf configuration file
# - an empty morph workspace directory
# - a git repository called "morphs" for fake system, stratum morphologies
# - a git repository calle "hello" for a dummy chunk

set -eu

source "$SRCDIR/scripts/fix-committer-info"

# Create a morph configuration file
cat <<EOF > "$DATADIR/morph.conf"
[config]
repo-alias = test=file://$DATADIR/%s#file://$DATADIR/%s
cachedir = $DATADIR/cache
log = $DATADIR/morph.log
no-distcc = true
quiet = true
EOF


# Create an empty directory to be used as a morph workspace
mkdir "$DATADIR/workspace"


# Create a fake morphs repository
mkdir "$DATADIR/morphs"

## Create a link to this repo that has a .git suffix
ln -s "$DATADIR/morphs" "$DATADIR/morphs.git"

cat <<EOF > "$DATADIR/morphs/hello-system.morph"
{
    "name": "hello-system",
    "kind": "system",
    "arch": "$(uname -m)",
    "strata": [
        {
            "morph": "hello-stratum",
            "repo": "test:morphs",
            "ref": "master"
        }
    ]
}
EOF

cat <<EOF > "$DATADIR/morphs/hello-stratum.morph"
{
    "name": "hello-stratum",
    "kind": "stratum",
    "chunks": [
        {
            "name": "hello",
            "repo": "test:hello",
            "ref": "master",
            "build-depends": []
        }
    ]
}
EOF

scripts/run-git-in "$DATADIR/morphs" init
scripts/run-git-in "$DATADIR/morphs" add .
scripts/run-git-in "$DATADIR/morphs" commit -m initial


# Add an extra branch to the morphs repo.
scripts/run-git-in "$DATADIR/morphs" checkout -b alfred
touch "$DATADIR/morphs/this.is.alfred"
scripts/run-git-in "$DATADIR/morphs" add this.is.alfred
scripts/run-git-in "$DATADIR/morphs" commit --quiet -m 'mark as alfred'
scripts/run-git-in "$DATADIR/morphs" checkout master


# Create a dummy chunk repository
mkdir "$DATADIR/hello"

cat <<EOF > "$DATADIR/hello/hello.morph"
{
    "name": "hello",
    "kind": "chunk",
    "build-system": "dummy"
}
EOF

scripts/run-git-in "$DATADIR/hello" init
scripts/run-git-in "$DATADIR/hello" add .
scripts/run-git-in "$DATADIR/hello" commit -m initial


# Add an extra branch to the hello repo.
scripts/run-git-in "$DATADIR/hello" checkout -b alfred
scripts/run-git-in "$DATADIR/hello" checkout master

