#!/bin/sh
#
# Run test suite for morph.
#
# Copyright (C) 2011-2014  Codethink Limited
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.


set -e


# Parse the command line.

full=false
while [ "$#" -gt 0 ]
do
    case "$1" in
        --full) full=true; shift ;;
        *) echo "ERROR: Unknown argument $1." 1>&2; exit 1 ;;
    esac
done


# Set PYTHONPATH to start with the current directory so that we always
# find the right version of it for the test suite.

case "$PYTHONPATH" in
    '') PYTHONPATH="$(pwd)" ;;
    *) PYTHONPATH="$(pwd):$PYTHONPATH" ;;
esac
export PYTHONPATH

# Run the style checks

errors=0
if [ -d .git ];
then
    echo "Checking copyright statements"
    if ! (git ls-files -z | xargs -0r scripts/check-copyright-year); then
        errors=1
    fi

    echo 'Checking source code for silliness'
    if ! (git ls-files |
          grep -v '\.gz$' |
          grep -Ev 'tests[^/]*/.*\.std(out|err)' |
          grep -vF 'tests.build/build-system-autotools.script' |
          xargs -r scripts/check-silliness); then
        errors=1
    fi
fi
if [ "$errors" != 0 ]; then
    exit "$errors"
fi

# Clean up artifacts from previous (possibly failed) runs, build,
# and run the tests.

python setup.py clean check

# Run scenario tests with yarn, if yarn is available.
#
# Yarn cleans up the environment when it runs tests, and this removes
# PYTHONPATH from the environment. However, we need our tests to have
# the PYTHONPATH, so that we can get them to, for example, use the right
# versions of updated dependencies.  The immediate current need is to
# be able to get them to use an updated version of cliapp, but it is
# a general need.
#
# We solve this by using the yarn --env option, allowing us to tell yarn
# explicitly which environment variables to set in addition to the set
# it sets anyway.

if command -v yarn > /dev/null
then
    yarn --env "PYTHONPATH=$PYTHONPATH" -s yarns/morph.shell-lib yarns/*.yarn
fi

# cmdtest tests.

HOME="$(pwd)/scripts"

cmdtest tests

if $full
then
    cmdtest tests.branching
else
    echo "NOT RUNNING test.branching"
fi

if $full && false
then
    cmdtest tests.merging
else
    echo "NOT RUNNING test.merging"
fi

cmdtest tests.deploy

# Building systems requires the 'filter' parameter of tarfile.TarFile.add():
# this was introduced in Python 2.7
if python --version 2>&1 | grep '^Python 2\.[78]' > /dev/null; then
    cmdtest tests.build
else
    echo "NOT RUNNING tests.build (requires Python 2.7)"
fi

# The as-root tests use YAML morphologies, so they require the PyYAML module.
if $full && [ $(whoami) = root ] && command -v mkfs.btrfs > /dev/null &&
    python -c "
import morphlib, sys
if not morphlib.got_yaml:
    sys.exit(1)
" > /dev/null 2>&1
then
    cmdtest tests.as-root
else
    echo "NOT RUNNING tests.as-root (requires PyYAML)"
fi
