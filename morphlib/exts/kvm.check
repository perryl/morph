#!/usr/bin/python
# Copyright (C) 2014  Codethink Limited
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

'''Preparatory checks for Morph 'kvm' write extension'''

import cliapp
import re
import urlparse

import morphlib.writeexts


class KvmPlusSshCheckExtension(morphlib.writeexts.WriteExtension):

    location_pattern = '^/(?P<guest>[^/]+)(?P<path>/.+)$'

    def process_args(self, args):
        if len(args) != 1:
            raise cliapp.AppException('Wrong number of command line args')

        self.require_btrfs_in_deployment_host_kernel()

        upgrade = self.get_environment_boolean('UPGRADE')
        if upgrade:
            raise cliapp.AppException(
                'Use the `ssh-rsync` write extension to deploy upgrades to an '
                'existing remote system.')

        location = args[0]
        ssh_host, vm_name, vm_path = self.check_and_parse_location(location)

        self.check_ssh_connectivity(ssh_host)
        self.check_no_existing_libvirt_vm(ssh_host, vm_name)
        self.check_extra_disks_exist(ssh_host, self.parse_attach_disks())

    def path_to_vm_exists(self, ssh_host, vmpath):
        head, tail = os.path.split(vmpath)
        return cliapp.ssh_runcmd(ssh_host, ['ls', head])

    def vm_file_exists(self, ssh_host, vmpath):
        return cliapp.ssh_runcmd(ssh_host, ['ls', vmpath])

    def check_and_parse_location(self, location):
        '''Check and parse the location argument to get relevant data.'''

        x = urlparse.urlparse(location)

        if x.scheme != 'kvm+ssh':
            raise cliapp.AppException(
                'URL schema must be kvm+ssh in %s' % location)

        m = re.match(self.location_pattern, x.path)
        if not m:
            raise cliapp.AppException('Cannot parse location %s' % location)

        return x.netloc, m.group('guest'), m.group('path')

    def check_no_existing_libvirt_vm(self, ssh_host, vm_name):
        try:
            cliapp.ssh_runcmd(ssh_host,
                ['virsh', '--connect', 'qemu:///system', 'domstate', vm_name])
        except cliapp.AppException as e:
            pass
        else:
            raise cliapp.AppException(
                'Host %s already has a VM named %s. You can use the ssh-rsync '
                'write extension to deploy upgrades to existing machines.' %
                (ssh_host, vm_name))

    def check_extra_disks_exist(self, ssh_host, filename_list):
        for filename in filename_list:
            try:
                cliapp.ssh_runcmd(ssh_host, ['ls', filename])
            except cliapp.AppException as e:
                raise cliapp.AppException('Did not find file %s on host %s' %
                                          (filename, ssh_host))

KvmPlusSshCheckExtension().run()
